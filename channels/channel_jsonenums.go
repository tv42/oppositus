// generated by jsonenums -type=Channel; DO NOT EDIT

package channels

import (
	"encoding/json"
	"fmt"
)

var (
	_ChannelNameToValue = map[string]Channel{
		"stable": stable,
		"beta":   beta,
		"alpha":  alpha,
	}

	_ChannelValueToName = map[Channel]string{
		stable: "stable",
		beta:   "beta",
		alpha:  "alpha",
	}
)

func init() {
	var v Channel
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ChannelNameToValue = map[string]Channel{
			interface{}(stable).(fmt.Stringer).String(): stable,
			interface{}(beta).(fmt.Stringer).String():   beta,
			interface{}(alpha).(fmt.Stringer).String():  alpha,
		}
	}
}

// MarshalJSON is generated so Channel satisfies json.Marshaler.
func (r Channel) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ChannelValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Channel: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Channel satisfies json.Unmarshaler.
func (r *Channel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Channel should be a string, got %s", data)
	}
	v, ok := _ChannelNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Channel %q", s)
	}
	*r = v
	return nil
}
